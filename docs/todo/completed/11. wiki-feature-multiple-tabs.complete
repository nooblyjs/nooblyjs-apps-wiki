# Multiple Tabs

## Requirement
I would like to create a tabbed interface for the application. So if you click on a file it creates a tabbed content interface in the content area where files can be viewed and if allowed, edited. I should be able to navigate through these tabs and close them if needed.

## Implementation Todo List

### Phase 1: Data Model & State Management
- [ ] Create `src/views/js/modules/tabManager.js`
  - [ ] Design tab data structure: `{ id, title, path, spaceName, content, metadata, isDirty, isSaved }`
  - [ ] Implement tab store (array of open tabs)
  - [ ] Create methods: `addTab()`, `closeTab()`, `switchTab()`, `updateTab()`, `closeAllTabs()`
  - [ ] Implement tab state persistence
  - [ ] Add event system for tab changes (`tabOpened`, `tabClosed`, `tabSwitched`)
  - [ ] Implement tab history/navigation
  - [ ] Add duplicate tab detection (prevent opening same file twice)

### Phase 2: UI Components
- [ ] Create tab bar HTML structure in main view
  - [ ] Tab container div with id `#tabBar`
  - [ ] Each tab with: icon, title, close button, active indicator
  - [ ] Add class `active` to active tab
  - [ ] Style with Bootstrap classes
- [ ] Create CSS styles for tabs (`public/css/tabs.css` or add to main)
  - [ ] Tab bar styling (horizontal layout, scrollable if needed)
  - [ ] Active tab highlighting
  - [ ] Hover effects on tabs
  - [ ] Close button styling
  - [ ] Tab title truncation with ellipsis
  - [ ] Tab icons based on file type
- [ ] Add scrollable behavior for many tabs
  - [ ] Add scroll arrows if tabs overflow
  - [ ] Implement smooth scroll behavior
  - [ ] Add "New Tab" button or menu

### Phase 3: Tab Rendering
- [ ] Update `documentController.js` to work with tabs
  - [ ] Modify `openDocumentByPath()` to create tab instead of replacing view
  - [ ] Add `createNewTab()` method
  - [ ] Add `renderTab(tab)` method to display specific tab content
  - [ ] Modify document viewers to work within tab context
  - [ ] Handle all viewer types (PDF, image, code, markdown, text, video, audio)
- [ ] Implement tab switching
  - [ ] Update active tab styling
  - [ ] Call appropriate viewer for selected tab's content
  - [ ] Preserve scroll position/state per tab
  - [ ] Handle browser history (back/forward buttons)

### Phase 4: Tab Lifecycle Events
- [ ] Implement tab click handlers
  - [ ] Click on tab header to switch to that tab
  - [ ] Click close button (X) to close tab
  - [ ] Middle-click to close (if desired)
  - [ ] Right-click context menu (close, close others, close all)
- [ ] Add keyboard shortcuts
  - [ ] Ctrl/Cmd+Tab to switch to next tab
  - [ ] Ctrl/Cmd+Shift+Tab to switch to previous tab
  - [ ] Ctrl/Cmd+W to close current tab
  - [ ] Ctrl/Cmd+T to open new tab (with new file dialog)
  - [ ] Alt/Cmd+1-9 to switch to specific tab
- [ ] Implement unsaved changes tracking
  - [ ] Show indicator (dot or asterisk) on tab when modified
  - [ ] Warn user before closing unsaved tab
  - [ ] Implement "Save All" functionality

### Phase 5: Tab Content Editing
- [ ] Update markdown editing for tabs
  - [ ] Allow in-place editing within tabs
  - [ ] Show edit mode indicator
  - [ ] Auto-save functionality with debouncing
  - [ ] Save on tab switch or explicit save action
  - [ ] Revert changes functionality
- [ ] Handle file type specific editing
  - [ ] Text files in textarea or code editor
  - [ ] Markdown with preview pane
  - [ ] Code files with syntax highlighting
  - [ ] Non-editable files (PDF, images) show view-only mode

### Phase 6: Tab Persistence
- [ ] Save open tabs to session/localStorage
  - [ ] Store list of open tabs and active tab
  - [ ] Persist on page unload
  - [ ] Load tabs on page reload
  - [ ] Add option to restore last session
- [ ] Implement tab persistence in backend (optional)
  - [ ] Save user's default tabs
  - [ ] Store as part of user preferences
  - [ ] Sync across devices if applicable

### Phase 7: Advanced Tab Features
- [ ] Implement "Pin Tab" feature
  - [ ] Keep certain tabs open
  - [ ] Visual indicator for pinned tabs
  - [ ] Pinned tabs not closable by context menu "close others"
- [ ] Add drag-and-drop to reorder tabs
  - [ ] Drag tab header to rearrange
  - [ ] Visual feedback during drag
  - [ ] Save new tab order
- [ ] Implement tab duplication
  - [ ] Right-click option to duplicate tab
  - [ ] Open same file in new tab
- [ ] Add "All Tabs" view
  - [ ] List all open tabs with thumbnails
  - [ ] Quick access menu

### Phase 8: Navigation Controller Integration
- [ ] Update `navigationController.js` to use tabs
  - [ ] Clicking file in navigation opens in tab
  - [ ] Double-click behavior (open new tab vs. switch tab)
  - [ ] Drag file into tab area to open
  - [ ] Right-click open in new tab
- [ ] Update `spacesController.js`
  - [ ] Tab support for space navigation
  - [ ] Tab cleanup when space deleted
- [ ] Update search results
  - [ ] Click search result opens in tab
  - [ ] Open in new tab option

### Phase 9: UI Polish
- [ ] Add animations
  - [ ] Tab open/close animation
  - [ ] Smooth tab switching
  - [ ] Fade in content
- [ ] Implement tab overflow handling
  - [ ] Scrollable tab bar
  - [ ] Tab menu dropdown for overflow tabs
  - [ ] "Recently Closed Tabs" recovery menu
  - [ ] Tab search/filter if many tabs
- [ ] Add visual feedback
  - [ ] Tab loading spinner
  - [ ] Unsaved changes indicator
  - [ ] File modified indicator
  - [ ] Error states for failed loads

### Phase 10: Accessibility
- [ ] Add ARIA labels and roles
  - [ ] Tab role on tab headers
  - [ ] Tablist role on tab container
  - [ ] Tabpanel role on content areas
- [ ] Keyboard navigation
  - [ ] Tab through tabs with keyboard
  - [ ] Arrow keys to navigate between tabs
  - [ ] Enter to activate tab
  - [ ] Delete/Backspace to close tab
- [ ] Screen reader support
  - [ ] Announce tab changes
  - [ ] Announce unsaved changes
  - [ ] Announce active tab

### Phase 11: Testing
- [ ] Unit tests for tabManager
  - [ ] Test tab creation/closing
  - [ ] Test tab switching
  - [ ] Test unsaved changes tracking
- [ ] Integration tests
  - [ ] Test tab UI rendering
  - [ ] Test tab persistence
  - [ ] Test navigation with tabs
- [ ] Manual testing
  - [ ] Open/close multiple tabs
  - [ ] Edit in tabs
  - [ ] Switch between tabs
  - [ ] Test keyboard shortcuts
  - [ ] Test browser back/forward
  - [ ] Test refresh with tabs

### Phase 12: Documentation
- [ ] Update CLAUDE.md with tab feature documentation
- [ ] Document keyboard shortcuts for users
- [ ] Add usage examples in USAGE.md
- [ ] Document API for developers who need to integrate with tabs
